// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.DBContext;

namespace api.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20200908125738_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("shared.Models.Category", b =>
                {
                    b.Property<Guid>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description_Category")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("IdCategory");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            IdCategory = new Guid("02cd4648-c78d-4341-b328-c0b17eaea6bf"),
                            Description_Category = "Category 1"
                        },
                        new
                        {
                            IdCategory = new Guid("c9fa1367-b405-4dbc-a966-bb8c15715857"),
                            Description_Category = "Category 2"
                        },
                        new
                        {
                            IdCategory = new Guid("f8450dd5-4f27-4f21-97da-eb5599a6d3c9"),
                            Description_Category = "Category 3"
                        });
                });

            modelBuilder.Entity("shared.Models.Invoice", b =>
                {
                    b.Property<Guid>("IdInvoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdInvoice");

                    b.HasIndex("IdUser");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            IdInvoice = new Guid("ca4b3b71-29ef-409c-a257-b1f22a5118ba"),
                            CreateTime = new DateTime(2020, 9, 8, 7, 57, 38, 83, DateTimeKind.Local).AddTicks(298),
                            IdUser = new Guid("ae6862d0-8c01-4eb4-97e6-611ecd74ac13")
                        },
                        new
                        {
                            IdInvoice = new Guid("610526ca-4cd2-48af-899c-cfec156ceb12"),
                            CreateTime = new DateTime(2020, 9, 8, 7, 57, 38, 83, DateTimeKind.Local).AddTicks(737),
                            IdUser = new Guid("c9a1626b-1fdd-40fc-b479-d7927dd85b5a")
                        },
                        new
                        {
                            IdInvoice = new Guid("6f9ef91a-b261-4e20-9f04-d741989a2716"),
                            CreateTime = new DateTime(2020, 9, 8, 7, 57, 38, 83, DateTimeKind.Local).AddTicks(754),
                            IdUser = new Guid("41a0b586-44a9-438d-9b55-83a54e9e77e3")
                        },
                        new
                        {
                            IdInvoice = new Guid("13cb25b4-251d-4494-8368-0f83bd5c45db"),
                            CreateTime = new DateTime(2020, 9, 8, 7, 57, 38, 83, DateTimeKind.Local).AddTicks(757),
                            IdUser = new Guid("14f7a527-440f-4992-8e9e-32d2763961b7")
                        },
                        new
                        {
                            IdInvoice = new Guid("206f6555-aa36-4b33-b3c9-3c4692f3f9ff"),
                            CreateTime = new DateTime(2020, 9, 8, 7, 57, 38, 83, DateTimeKind.Local).AddTicks(760),
                            IdUser = new Guid("d733e78e-fbf5-49d3-b5eb-73d121a155e3")
                        },
                        new
                        {
                            IdInvoice = new Guid("b1ec9013-efa0-41cd-a7d0-e8a9c4a5f6f4"),
                            CreateTime = new DateTime(2020, 9, 8, 7, 57, 38, 83, DateTimeKind.Local).AddTicks(766),
                            IdUser = new Guid("1604c687-befd-4076-83fa-0445d00fe53f")
                        });
                });

            modelBuilder.Entity("shared.Models.Product", b =>
                {
                    b.Property<Guid>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdCategory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCategory");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            IdProduct = new Guid("70252e29-75d6-401b-9523-d3af982d554f"),
                            DescriptionProduct = "Producto77",
                            IdCategory = new Guid("02cd4648-c78d-4341-b328-c0b17eaea6bf"),
                            Price = 838.5605164051804m
                        },
                        new
                        {
                            IdProduct = new Guid("8a1cd0d7-ddab-4b63-93e0-d23776a8abe5"),
                            DescriptionProduct = "Producto78",
                            IdCategory = new Guid("02cd4648-c78d-4341-b328-c0b17eaea6bf"),
                            Price = 945.6941801801762m
                        },
                        new
                        {
                            IdProduct = new Guid("66118f36-1d7c-484d-94db-89e103486b1c"),
                            DescriptionProduct = "Producto78",
                            IdCategory = new Guid("c9fa1367-b405-4dbc-a966-bb8c15715857"),
                            Price = 714.1263292702504m
                        },
                        new
                        {
                            IdProduct = new Guid("bdabc22c-6564-4e81-a5bb-2ce38c62901e"),
                            DescriptionProduct = "Producto78",
                            IdCategory = new Guid("c9fa1367-b405-4dbc-a966-bb8c15715857"),
                            Price = 549.8297109966305m
                        },
                        new
                        {
                            IdProduct = new Guid("3dc20695-ac3b-44e9-8629-7bc7ef7bf4b8"),
                            DescriptionProduct = "Producto78",
                            IdCategory = new Guid("f8450dd5-4f27-4f21-97da-eb5599a6d3c9"),
                            Price = 729.0270276037171m
                        },
                        new
                        {
                            IdProduct = new Guid("4c39d5bb-2873-45b2-b386-010e8be3b9b8"),
                            DescriptionProduct = "Producto78",
                            IdCategory = new Guid("f8450dd5-4f27-4f21-97da-eb5599a6d3c9"),
                            Price = 314.4367776412688m
                        });
                });

            modelBuilder.Entity("shared.Models.Sale", b =>
                {
                    b.Property<Guid>("IdSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceIdInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductIdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Product_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdSale");

                    b.HasIndex("InvoiceIdInvoice");

                    b.HasIndex("ProductIdProduct");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("shared.Models.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("IdUser_Type")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserTypeIdUser_Type")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdUser");

                    b.HasIndex("UserTypeIdUser_Type");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            IdUser = new Guid("ae6862d0-8c01-4eb4-97e6-611ecd74ac13"),
                            Email = "correo82@correo.com",
                            IdUser_Type = new Guid("646a1b54-f6c4-4680-9f6c-016a47f2c929"),
                            Password = "Pass82",
                            Username = "Usuario82"
                        },
                        new
                        {
                            IdUser = new Guid("c9a1626b-1fdd-40fc-b479-d7927dd85b5a"),
                            Email = "correo82@correo.com",
                            IdUser_Type = new Guid("646a1b54-f6c4-4680-9f6c-016a47f2c929"),
                            Password = "Pass82",
                            Username = "Usuario82"
                        },
                        new
                        {
                            IdUser = new Guid("41a0b586-44a9-438d-9b55-83a54e9e77e3"),
                            Email = "correo82@correo.com",
                            IdUser_Type = new Guid("06212072-5316-48ee-9da5-18a6dbde8188"),
                            Password = "Pass82",
                            Username = "Usuario82"
                        },
                        new
                        {
                            IdUser = new Guid("14f7a527-440f-4992-8e9e-32d2763961b7"),
                            Email = "correo82@correo.com",
                            IdUser_Type = new Guid("06212072-5316-48ee-9da5-18a6dbde8188"),
                            Password = "Pass82",
                            Username = "Usuario82"
                        },
                        new
                        {
                            IdUser = new Guid("d733e78e-fbf5-49d3-b5eb-73d121a155e3"),
                            Email = "correo82@correo.com",
                            IdUser_Type = new Guid("60ac4f26-657d-4a3e-9a6d-1798112a2d0c"),
                            Password = "Pass82",
                            Username = "Usuario82"
                        },
                        new
                        {
                            IdUser = new Guid("1604c687-befd-4076-83fa-0445d00fe53f"),
                            Email = "correo82@correo.com",
                            IdUser_Type = new Guid("60ac4f26-657d-4a3e-9a6d-1798112a2d0c"),
                            Password = "Pass82",
                            Username = "Usuario82"
                        });
                });

            modelBuilder.Entity("shared.Models.UserType", b =>
                {
                    b.Property<Guid>("IdUser_Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description_Type")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("IdUser_Type");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            IdUser_Type = new Guid("646a1b54-f6c4-4680-9f6c-016a47f2c929"),
                            Description_Type = "Tipo Usuario 1"
                        },
                        new
                        {
                            IdUser_Type = new Guid("06212072-5316-48ee-9da5-18a6dbde8188"),
                            Description_Type = "Tipo Usuario 2"
                        },
                        new
                        {
                            IdUser_Type = new Guid("60ac4f26-657d-4a3e-9a6d-1798112a2d0c"),
                            Description_Type = "Tipo Usuario 3"
                        });
                });

            modelBuilder.Entity("shared.Models.Invoice", b =>
                {
                    b.HasOne("shared.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shared.Models.Product", b =>
                {
                    b.HasOne("shared.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shared.Models.Sale", b =>
                {
                    b.HasOne("shared.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceIdInvoice");

                    b.HasOne("shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductIdProduct");
                });

            modelBuilder.Entity("shared.Models.User", b =>
                {
                    b.HasOne("shared.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeIdUser_Type")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
